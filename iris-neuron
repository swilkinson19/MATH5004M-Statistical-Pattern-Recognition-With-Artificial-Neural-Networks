#IMPORT PACKAGES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as cl

#READ IN DATA
iris = pd.read_csv('iris.data', header=None)
iris.columns = ['sepal_length','sepal_width','petal_length','petal_width','species']

#NORMALISE DATA
iris['sepal_length'] = (iris['sepal_length']-iris['sepal_length'].min()) / (iris['sepal_length'].max()-iris['sepal_length'].min()) 
iris['sepal_width'] = (iris['sepal_width']-iris['sepal_width'].min()) / (iris['sepal_width'].max()-iris['sepal_width'].min()) 
iris['petal_length'] = (iris['petal_length']-iris['petal_length'].min()) / (iris['petal_length'].max()-iris['petal_length'].min()) 
iris['petal_width'] = (iris['petal_width']-iris['petal_width'].min()) / (iris['petal_width'].max()-iris['petal_width'].min()) 

#CONVERT SPECIES TO BINARY VARIABLE
for i in range(150):
    if iris['species'][i] == 'Iris-setosa':
        iris.at[i, 'species'] = 0
    elif iris['species'][i] == 'Iris-versicolor':
        iris.at[i, 'species'] = 1
    else:
        iris.at[i,'species'] = 2
iris = iris[iris['species'] != 2]

#ADD BIAS
iris = iris[['sepal_length','sepal_width','petal_length','petal_width','species']].T
bias = [0]*100
iris.loc['bias'] = bias

#SEPARATE TRAINING SET
iris_train = iris.loc[:,5:94]
#RESET INDEX
iris_train.columns = range(90)
iris_train_input = iris_train.loc[['sepal_length','sepal_width','petal_length','petal_width']].T

#SHUFFLE TRAINING SAMPLE ORDER
from sklearn.utils import shuffle
iris_train = shuffle(iris_train.T)
iris_train = iris_train.T
iris_train.columns = range(90)

PREPARE TEST SET
iris_test = iris.loc[:,0:4].join(iris.loc[:,95:99])
iris_test.columns = range(10)
iris_test_input = iris_test.loc[['sepal_length','sepal_width','petal_length','petal_width']].T

#CREATE CLASS LABELS FOR TRAINING AND TEST SETS
iris_train_target = iris_train.loc[['species']].T
iris_train_target.species = iris_train_target.species.astype(int)
iris_test_target = iris_test.loc[['species']].T
iris_test_target.species = iris_test_target.species.astype(int)

#DEFINE CLASS FOR THE NEURAL NETWORK
class NeuralNetwork():
    
    def __init__ (self, input_nodes, output_nodes, learning_rate):
        
        self.in_nodes = input_nodes
        self.out_nodes = output_nodes
        self.lr = learning_rate
        self.bias = np.zeros((output_nodes, 1))
        self.weights = (np.random.randn(self.out_nodes,self.in_nodes))/self.in_nodes
       
    def actfunc(self,x):
        return 1/(1 + np.exp(-x.astype(float))) 
    
    def actfuncdiff(self, x):
        return self.actfunc(x)*(1 - self.actfunc(x))
    
    def training(self, training_inputs, training_targets, iteration_number):
        self.training_weights.append(self.weights.tolist()[0])
        self.training_bias.append(self.bias[0][0])
        #for each training case:
        for i in range(0,iteration_number,1):
            self.training_weights.append(self.weights.tolist()[0])
            self.training_bias.append(self.bias[0][0])
            #set up each training case as an array of values
            network_inputs = np.array(training_inputs.loc[i],ndmin=2).T
            network_targets = np.array(training_targets.loc[i], ndmin=2).T
            
            #calculate the weighted sums from the input layer
            weighted_sums = np.dot(self.weights, network_inputs) 
            #apply the activation function to the weighted sums
            network_outputs = self.actfunc(weighted_sums + self.bias)
            #print(network_outputs)
            
            #compare the network output with the target values
            network_error = network_targets - network_outputs
            #update the bias
            self.bias = self.bias + self.lr * network_error*self.actfuncdiff(weighted_sums + self.bias)
            #update the weights
            self.weights = self.weights + self.lr*np.dot((network_error*self.actfuncdiff(weighted_sums + self.bias)),network_inputs.T)
        
    def test(self, input_data):
        network_inputs = np.array(input_data, ndmin=2).T
        weighted_sums = np.dot(self.weights, network_inputs)
        network_output = self.actfunc(weighted_sums + self.bias)
        return network_output

#CREATE INSTANCE OF THE NETWORK
iris_network = NeuralNetwork(4, 1, 3.2)

#TRAIN THE NETWORK
iris_network.training(iris_train_input, iris_train_target, 90)

#CREATE ARTIFICAL DATA FOR HEATMAP
sepal_length_test = np.linspace(iris_train.loc['sepal_length'].min(),
                                iris_train.loc['sepal_length'].max(),
                                100)
sepal_width_test = np.linspace(iris_train.loc['sepal_width'].min(),
                               iris_train.loc['sepal_width'].max(),
                               100)
petal_length_test = np.linspace(iris_train.loc['petal_length'].min(),
                                iris_train.loc['petal_length'].max(),
                                100)
petal_width_test = np.linspace(iris_train.loc['petal_width'].min(),
                               iris_train.loc['petal_width'].max(),
                               100)

#DEFINE FUNCTION TO PLOT HEATMAP FOR NEURON
newcmp = cl.ListedColormap(['bisque','powderblue'])
sccmp = cl.ListedColormap(['darkorange','dodgerblue'])
def createNeuronHeatmap(test_list_one, test_list_two, list_one_name, list_two_name):
    #create training data
    iris_train_input = iris_train.loc[[list_one_name,list_two_name]].T
    iris_train_target = iris_train.loc[['species']].T
    iris_train_target.species = iris_train_target.species.astype(int)
    #create instance of network
    iris_heatmap_network = NeuralNetwork(2,1,3.2)
    #train network
    iris_heatmap_network.training(iris_train_input, iris_train_target, 90)
    #create sample test data
    df_sample = pd.DataFrame(np.repeat(test_list_one,100),
                             columns=[list_one_name]).T
    df_sample.loc[list_two_name] = test_list_two.tolist()*100
    #create variables for heatmap plotting
    z = []
    for i in range(10000):
        z.append(iris_heatmap_network.test(df_sample.T.loc[i])[0][0])
    y,x = np.meshgrid(test_list_two, test_list_one)
    fig,ax = plt.subplots()
    ax.pcolormesh(x,y,np.array(z).round().reshape(100,100), cmap=newcmp)
    plt.scatter(iris_train.loc[list_one_name], 
                iris_train.loc[list_two_name], 
                c=iris_train.loc['species'],
                cmap=sccmp)
    ax.set_xlabel(list_one_name)
    ax.set_ylabel(list_two_name)

#PLOT HEATMAP
createNeuronHeatmap(sepal_length_test, sepal_width_test, 'sepal_length','sepal_width')
